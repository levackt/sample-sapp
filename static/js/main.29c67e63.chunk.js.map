{"version":3,"sources":["service/error.tsx","service/sdk.ts","service/wallet.tsx","service/account.tsx","theme/Button.tsx","theme/ErrorMessage.tsx","service/helpers.ts","theme/Header.tsx","theme/Loading.tsx","theme/PageLayout.tsx","theme/styles.ts","components/ErrorLogic.tsx","components/Splash.tsx","config.ts","components/ContractList/ContractItem.tsx","components/ContractList/index.tsx","components/HeaderLogic.tsx","components/Form/fields/FormTextField.tsx","components/Form/validationSchema.ts","components/ContractLogic/ResetForm.tsx","components/ContractLogic/Counter.tsx","components/ContractLogic/index.tsx","routes/contract.tsx","routes/index.tsx","serviceWorker.ts","index.tsx"],"names":["initError","callback","state","error","setError","err","toString","clearError","ErrorContext","React","useError","ErrorProvider","props","value","setValue","undefined","context","Provider","children","loadOrCreateMnemonic","key","loaded","localStorage","getItem","generated","Bip39","encode","Random","getBytes","setItem","burnerWallet","a","mnemonic","Secp256k1Pen","fromMnemonic","pen","pubkey","encodeSecp256k1Pubkey","address","pubkeyToAddress","signer","signBytes","sign","buildFeeTable","feeToken","gasPrice","stdFee","gas","denom","price","amount","Math","floor","upload","init","exec","send","httpUrl","txEncryptionSeed","EnigmaUtils","GenerateNewSeed","client","SigningCosmWasmClient","defaultContext","loading","getClient","Error","CosmWasmContext","useSdk","BurnerWalletProvider","SdkProvider","config","loadWallet","useState","useEffect","then","wallet","connect","faucetUrl","getAccount","acct","balance","length","ky","post","json","ticker","console","catch","dummyRefresh","AccountContext","refreshAccount","useAccount","AccountProvider","account","useStyles","makeStyles","root","height","width","background","border","outline","borderRadius","padding","fontSize","fontWeight","color","boxShadow","Button","classes","disableElevation","disableFocusRipple","disableRipple","className","ErrorMessage","Alert","severity","onClose","AlertTitle","printableCoin","coin","startsWith","slice","toUpperCase","Decimal","fromAtomics","ElevationScroll","trigger","useScrollTrigger","disableHysteresis","threshold","elevation","Header","map","join","printableBalance","href","rel","target","AppBar","Toolbar","to","IconButton","edge","ArrowBack","variant","Loading","theme","createStyles","flexGrow","PageLayout","Grid","container","spacing","justify","item","xs","sm","md","useBaseStyles","contractLogicContainer","display","flexDirection","alignItems","card","margin","maxWidth","listStyleType","breakpoints","up","marginBlockStart","marginBlockEnd","gridTemplateColumns","marginBottom","marginTop","listCardContainer","position","justifyContent","listCard","textAlign","link","textDecoration","form","input","bottomSpacer","ErrorLogic","Splash","codeId","ContractItem","label","ListItem","ListItemAvatar","Avatar","ListItemText","primary","secondary","defaultCodeId","ContractList","contracts","setContracts","getContracts","List","HeaderLogic","FormTextField","type","placeholder","InputProps","useField","field","meta","errorText","touched","TextField","id","helperText","fullWidth","ResetValidationSchema","Yup","shape","countField","min","required","ResetForm","handleReset","initialValues","validationSchema","onSubmit","setSubmitting","handleSubmit","name","disabled","Counter","contractAddress","setState","queryContractSmart","get_count","res","count","includes","increment","execute","reset","values","newCount","parseInt","LinearProgress","onClick","emptyInfo","ContractLogic","getContract","info","ContractSearch","useParams","Routes","basename","exact","path","component","Boolean","window","location","hostname","match","navigator","serviceWorker","ready","registration","unregister","message","Component","rootEl","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.29c67e63.chunk.js","sourcesContent":["import * as React from \"react\";\n\n/*\nUgly to use a singleton to manage functions, but the issue is that we want to return the same\nsetError, clearError functions to the consumers, so they don't trigger new effects everytime\nwe update the error state, which can lead to an infinite loop:\n\nComponent.useEffect returns error, calls setError\nErrorProvider updates value and returns new closure for setError\nuseEffect is triggered again, with another error....\n\nWhen this is updated, we only want things to re-render that depend on the actual error value.\nThere may be cleaner ways to do this but encapsulating a singleton here seemed fine.\n(We can't rely on local variables that change each time ErrorProvider() is called).\n*/\n\nlet initError: string | undefined;\n\n// this should be set on first render\nlet callback = (state: State): void => {\n  // this is overriden on first render\n  initError = state.error;\n};\n\nfunction setError(err: any): void {\n  const error = typeof err === \"string\" ? err : err.toString();\n  callback({ error });\n}\n\nfunction clearError(): void {\n  callback({});\n}\n\n/** ****************/\n\nexport interface ErrorContextType {\n  readonly error?: string;\n  readonly setError: (err: string) => void;\n  readonly clearError: () => void;\n}\n\nconst defaultContext = (): ErrorContextType => {\n  return {\n    setError,\n    clearError,\n  };\n};\n\nexport const ErrorContext = React.createContext<ErrorContextType>(defaultContext());\n\nexport const useError = (): ErrorContextType => React.useContext(ErrorContext);\n\ninterface State {\n  readonly error?: string;\n}\n\nexport function ErrorProvider(props: { readonly children: any }): JSX.Element {\n  const [value, setValue] = React.useState<State>({});\n  callback = setValue;\n  // if there is an error before we render the first time, make sure we render it\n  if (initError) {\n    setValue({ error: initError });\n    initError = undefined;\n  }\n\n  const context: ErrorContextType = {\n    error: value.error,\n    setError,\n    clearError,\n  };\n\n  return <ErrorContext.Provider value={context}>{props.children}</ErrorContext.Provider>;\n}\n","import {\n  encodeSecp256k1Pubkey,\n  pubkeyToAddress,\n  Secp256k1Pen,\n  SigningCallback,\n  SigningCosmWasmClient,\n  EnigmaUtils,\n} from \"secretjs\";\nimport {FeeTable} from \"secretjs/types/signingcosmwasmclient\";\nimport { StdSignature } from \"secretjs/types/types\";\nimport { Bip39, Random } from \"@iov/crypto\";\n\n\n// generateMnemonic will give you a fresh mnemonic\n// it is up to the app to store this somewhere\nexport function generateMnemonic(): string {\n  return Bip39.encode(Random.getBytes(16)).toString();\n}\n\n// some code that will only work in a browser...\nexport function loadOrCreateMnemonic(): string {\n  const key = \"burner-wallet\";\n  const loaded = localStorage.getItem(key);\n  if (loaded) {\n    return loaded;\n  }\n  const generated = generateMnemonic();\n  localStorage.setItem(key, generated);\n  return generated;\n}\n\nexport interface ConnectResult {\n  readonly address: string;\n  readonly client: SigningCosmWasmClient;\n}\n\nexport interface Wallet {\n  readonly address: string;\n  readonly signer: SigningCallback;\n}\n\nexport async function burnerWallet(): Promise<Wallet> {\n  const mnemonic = loadOrCreateMnemonic();\n  const pen = await Secp256k1Pen.fromMnemonic(mnemonic);\n  const pubkey = encodeSecp256k1Pubkey(pen.pubkey);\n  const address = pubkeyToAddress(pubkey, \"secret\");\n  const signer = (signBytes: Uint8Array): Promise<StdSignature> => pen.sign(signBytes);\n  return { address, signer };\n}\n\nconst buildFeeTable = (feeToken: string, gasPrice: number): FeeTable => {\n  const stdFee = (gas: number, denom: string, price: number) => {\n    const amount = Math.floor(gas * price);\n    return {\n      amount: [{ amount: amount.toString(), denom: denom }],\n      gas: gas.toString(),\n    }\n  };\n\n  return {\n    upload: stdFee(1000000, feeToken, gasPrice),\n    init: stdFee(500000, feeToken, gasPrice),\n    exec: stdFee(200000, feeToken, gasPrice),\n    send: stdFee(80000, feeToken, gasPrice),\n  }\n};\n\n// this creates a new connection to a server at URL,\n// using a signing keyring generated from the given mnemonic\nexport async function connect(httpUrl: string, { address, signer }: Wallet): Promise<ConnectResult> {\n  let txEncryptionSeed = EnigmaUtils.GenerateNewSeed();\n  const client = new SigningCosmWasmClient(httpUrl, address, signer, txEncryptionSeed,\n    buildFeeTable(\"uscrt\", 1));\n  return { address, client };\n}\n","import { SigningCosmWasmClient } from \"secretjs\";\nimport ky from \"ky\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\n\nimport { AppConfig } from \"../config\";\nimport { useError } from \"./error\";\nimport { burnerWallet, connect, Wallet } from \"./sdk\";\n\nexport interface CosmWasmContextType {\n  readonly loading: boolean;\n  readonly address: string;\n  readonly getClient: () => SigningCosmWasmClient;\n}\n\nconst defaultContext: CosmWasmContextType = {\n  loading: true,\n  address: \"\",\n  getClient: (): SigningCosmWasmClient => {\n    throw new Error(\"not yet initialized\");\n  },\n};\n\nexport const CosmWasmContext = React.createContext<CosmWasmContextType>(defaultContext);\n\nexport const useSdk = (): CosmWasmContextType => React.useContext(CosmWasmContext);\n\nexport interface WalletProviderProps {\n  config: AppConfig;\n  children: any;\n}\n\nexport interface SdkProviderProps {\n  config: AppConfig;\n  loadWallet: () => Promise<Wallet>;\n  children: any;\n}\n\nexport function BurnerWalletProvider(props: WalletProviderProps): JSX.Element {\n  return (\n    <SdkProvider config={props.config} loadWallet={burnerWallet}>\n      {props.children}\n    </SdkProvider>\n  );\n}\n\nexport function SdkProvider(props: SdkProviderProps): JSX.Element {\n  const [value, setValue] = useState(defaultContext);\n  const { setError } = useError();\n\n  const { config, loadWallet } = props;\n\n  // just call this once on startup\n  useEffect(() => {\n    loadWallet()\n      .then(wallet => connect(config.httpUrl, wallet))\n      .then(async ({ address, client }) => {\n        // load from faucet if needed\n        if (config.faucetUrl) {\n          try {\n            const acct = await client.getAccount();\n            if (!acct?.balance?.length) {\n              await ky.post(config.faucetUrl, { json: { ticker: \"SCRT\", address } });\n            }\n          } catch(error) {\n            console.error(error)\n          }          \n        }\n\n        setValue({\n          loading: false,\n          address: address,\n          getClient: () => client,\n        });\n      })\n      .catch(setError);\n\n    // TODO: return a clean-up function???\n  }, [config.httpUrl, config.faucetUrl, loadWallet, setError]);\n\n  return <CosmWasmContext.Provider value={value}>{props.children}</CosmWasmContext.Provider>;\n}\n","import { Account } from \"secretjs/types/cosmwasmclient\";\nimport * as React from \"react\";\n\nimport { useError } from \"./error\";\nimport { useSdk } from \"./wallet\";\n\ninterface State {\n  readonly account?: Account;\n  readonly address?: String;\n}\n\nexport interface AccountContextType extends State {\n  readonly refreshAccount: () => void;\n}\n\nfunction dummyRefresh(): void {}\n\nconst defaultContext = (): AccountContextType => {\n  return {\n    refreshAccount: dummyRefresh,\n  };\n};\n\nexport const AccountContext = React.createContext<AccountContextType>(defaultContext());\n\nexport const useAccount = (): AccountContextType => React.useContext(AccountContext);\n\nexport function AccountProvider(props: { readonly children: any }): JSX.Element {\n  const [value, setValue] = React.useState<State>({});\n  const { loading, getClient } = useSdk();\n  const { setError } = useError();\n\n  const refreshAccount = (): void => {\n    if (!loading) {\n      getClient()\n        .getAccount()\n        .then(account => setValue({ account }))\n        .catch(setError);\n    }\n  };\n\n  // this should just be called once on startup\n  React.useEffect(refreshAccount, [loading, getClient, setError]);\n\n  const context: AccountContextType = {\n    refreshAccount,\n    account: value.account,\n  };\n\n  return <AccountContext.Provider value={context}>{props.children}</AccountContext.Provider>;\n}\n","import MuiButton, { ButtonProps } from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport * as React from \"react\";\n\n// TODO: pick some better styles\nconst useStyles = makeStyles({\n  root: {\n    height: \"40px\",\n    width: \"100%\",\n    background: \"#ebf5fc\",\n    border: \"none\",\n    outline: \"none\",\n    borderRadius: \"20px\",\n    padding: \"5px 15px\",\n    fontSize: \"20px\",\n    fontWeight: 500,\n    color: \"#3d5af1\",\n    boxShadow: \"-2px -2px 6px rgba(255, 255, 255, 1), 2px 2px 6px rgba(0, 0, 0, 0.1)\",\n    \"&:hover\": {\n      boxShadow: \"-2px -2px 6px rgba(255, 255, 255, 1), 2px 2px 6px rgba(0, 0, 0, 0.1)\",\n      background: \"#ebf5fc\",\n    },\n    \"&:active\": {\n      boxShadow: \"inset -2px -2px 6px rgba(255, 255, 255, 1), inset 2px 2px 6px rgba(0, 0, 0, 0.1)\",\n      background: \"#ebf5fc\",\n    },\n  },\n});\n\n// This is a page body to display when there is an error\nexport function Button(props: ButtonProps): JSX.Element {\n  const classes = useStyles();\n  return <MuiButton disableElevation disableFocusRipple disableRipple className={classes.root} {...props} />;\n}\n","import { Alert, AlertTitle } from \"@material-ui/lab\";\nimport * as React from \"react\";\n\nexport interface ErrorMessageProps {\n  readonly error: string;\n  readonly clearError: () => void;\n}\n\n// This is a page body to display when there is an error\nexport function ErrorMessage({ error, clearError }: ErrorMessageProps): JSX.Element {\n  return (\n    <Alert severity=\"error\" onClose={clearError}>\n      <AlertTitle>Error</AlertTitle>\n      {error}\n    </Alert>\n  );\n}\n","import { types } from \"secretjs\";\nimport { Decimal } from \"@iov/encoding\";\n\n// NARROW NO-BREAK SPACE (U+202F)\nconst thinSpace = \"\\u202F\";\n\nexport function printableBalance(balance?: readonly types.Coin[]): string {\n  if (!balance || balance.length === 0) return \"–\";\n  return balance.map(printableCoin).join(\", \");\n}\n\nexport function printableCoin(coin?: types.Coin): string {\n  if (!coin) {\n    return \"0\";\n  }\n  if (coin.denom.startsWith(\"u\")) {\n    const ticker = coin.denom.slice(1).toUpperCase();\n    return Decimal.fromAtomics(coin.amount, 6).toString() + thinSpace + ticker;\n  } else {\n    return coin.amount + thinSpace + coin.denom;\n  }\n\n  \n}\n\n","import { Account } from \"secretjs/types/cosmwasmclient\";\nimport { AppBar, IconButton, Toolbar } from \"@material-ui/core\";\nimport MuiTypography from \"@material-ui/core/Typography\";\nimport useScrollTrigger from \"@material-ui/core/useScrollTrigger\";\nimport { ArrowBack } from \"@material-ui/icons\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { printableBalance } from \"../service/helpers\";\n\ninterface ElevationScrollProps {\n  readonly children: any;\n}\n\nfunction ElevationScroll(props: ElevationScrollProps): JSX.Element {\n  const { children } = props;\n  const trigger = useScrollTrigger({\n    disableHysteresis: true,\n    threshold: 0,\n    //   target: window ? window() : undefined,\n  });\n\n  return React.cloneElement(children, {\n    elevation: trigger ? 4 : 0,\n  });\n}\n\nexport interface HeaderProps {\n  readonly account?: Account;\n  readonly address?: String;\n  children?: React.ReactElement;\n}\n\n// Show the current account or any error message in the header\nexport function Header({ account, address, children }: HeaderProps, props: any): JSX.Element {\n  const balance = account ? printableBalance(account.balance) : (<span>\n                (No funds - Go get some{\" \"}\n                <a\n                  href=\"https://faucet.pub.testnet.enigma.co\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  from the faucet\n                </a>\n                )\n              </span>);\n\n  return (\n    <React.Fragment>\n      <ElevationScroll {...props}>\n        <AppBar>\n          <Toolbar>\n            <Link to=\"/\">\n              <IconButton edge=\"start\" color=\"inherit\">\n                <ArrowBack />\n              </IconButton>\n            </Link>\n            <MuiTypography variant=\"h6\">\n              {address} - {balance}\n            </MuiTypography>\n          </Toolbar>\n        </AppBar>\n      </ElevationScroll>\n      <Toolbar />\n    </React.Fragment>\n  );\n}\n","import MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nexport function Loading(): JSX.Element {\n  return <MuiTypography variant=\"h2\">Loading Wallet...</MuiTypography>;\n}\n","import Grid from \"@material-ui/core/Grid\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\nimport * as React from \"react\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n      height: \"102vh\",\n      background: \"#ebf5fc\",\n    },\n  }),\n);\n\ninterface Props {\n  readonly children: any;\n}\n\n// TODO: figure out a better grid system\nexport function PageLayout({ children }: Props): JSX.Element {\n  const classes = useStyles();\n\n  return (\n    <Grid className={classes.root} container spacing={3} justify=\"center\">\n      <Grid item xs={12} sm={10} md={8}>\n        {children}\n      </Grid>\n    </Grid>\n  );\n}\n","import { createStyles, makeStyles, Theme } from \"@material-ui/core/styles\";\n\nexport const useBaseStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    contractLogicContainer: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n    },\n    card: {\n      width: \"80vw\",\n      margin: \"10px\",\n      padding: \"20px\",\n      background: \"#ebf5fc\",\n      boxShadow: \"-5px -5px 15px rgba(255, 255, 255, 0.8), 5px 5px 10px rgba(0, 0, 0, 0.1)\",\n      borderRadius: \"25px\",\n      maxWidth: \"600px\",\n      \"& ul\": {\n        listStyleType: \"none\",\n        padding: \"0\",\n        margin: \"0\",\n        [theme.breakpoints.up(\"sm\")]: {\n          marginBlockStart: \"1em\",\n          marginBlockEnd: \"1em\",\n        },\n      },\n      \"& li\": {\n        display: \"grid\",\n        gridTemplateColumns: \"1fr\",\n        fontSize: \".75em\",\n        \"& p:first-child\": {\n          marginBottom: \".2em\",\n        },\n        \"& p:last-child\": {\n          marginTop: \".2em\",\n        },\n        [theme.breakpoints.up(\"sm\")]: {\n          gridTemplateColumns: \"25% 75%\",\n          fontSize: \".9em\",\n          \"& p:first-child\": {\n            margin: \".5em 0.05em\",\n          },\n          \"& p:last-child\": {\n            margin: \".5em 0.05em\",\n          },\n        },\n        [theme.breakpoints.up(\"md\")]: {\n          gridTemplateColumns: \"20% 80%\",\n          fontSize: \"1em\",\n          \"& p:first-child\": {\n            margin: \".5em 0.1\",\n          },\n          \"& p:last-child\": {\n            margin: \".5em .1em\",\n          },\n        },\n      },\n      \"& li p:first-child\": {\n        color: \"#3d5af1\",\n      },\n      [theme.breakpoints.up(\"sm\")]: {\n        width: \"75vw\",\n        margin: \"20px\",\n        padding: \"30px 20px\",\n      },\n      [theme.breakpoints.up(\"md\")]: {\n        width: \"60vw\",\n        padding: \"30px 40px\",\n      },\n    },\n    listCardContainer: {\n      position: \"relative\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n    },\n    listCard: {\n      flexDirection: \"column-reverse\",\n      textAlign: \"center\",\n      width: \"95vw\",\n      margin: \"5px\",\n      padding: \"10px 5px\",\n      borderRadius: \"116px\",\n      background: \"#ebf5fc\",\n      boxShadow: \"-5px -5px 15px rgba(255, 255, 255, 0.8), 5px 5px 10px rgba(0, 0, 0, 0.1)\",\n      \"&:hover\": {\n        boxShadow: \"inset -5px -5px 10px rgba(255,255,255,0.5), inset 5px 5px 10px rgba(0,0,0,0.05)\",\n      },\n      \"& .MuiListItemText-secondary\": {\n        fontSize: \"13px\",\n      },\n      [theme.breakpoints.up(\"sm\")]: {\n        width: \"70vw\",\n        margin: \"20px\",\n        padding: \"30px 40px\",\n        \"& .MuiListItemText-secondary\": {\n          fontSize: \"14px\",\n        },\n      },\n      [theme.breakpoints.up(\"md\")]: {\n        flexDirection: \"row\",\n        textAlign: \"left\",\n        width: \"60vw\",\n        \"& .MuiListItemText-secondary\": {\n          fontSize: \"15px\",\n        },\n      },\n    },\n    link: {\n      textDecoration: \"none\",\n      color: \"#3d5af1\",\n    },\n    form: {\n      height: \"150px\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"space-around\",\n      maxWidth: \"600px\",\n      padding: \"10px\",\n      \"& p\": {\n        fontSize: \"0.75rem\",\n      },\n      \"& .MuiFormHelperText-root.Mui-error\": {\n        marginTop: \"0\",\n      },\n      [theme.breakpoints.up(\"sm\")]: {\n        height: \"150px\",\n        justifyContent: \"space-around\",\n        margin: \"20px\",\n        padding: \"20px\",\n        \"& p\": {\n          fontSize: \"1rem\",\n        },\n        \"& .MuiFormHelperText-root.Mui-error\": {\n          marginTop: \"3px\",\n        },\n      },\n    },\n    input: {\n      display: \"flex\",\n      \"& input\": {\n        height: \"30px\",\n        width: \"100%\",\n        background: \"#ebf5fc\",\n        border: \"none\",\n        outline: \"none\",\n        borderRadius: \"20px\",\n        padding: \"5px 15px\",\n        fontSize: \"18px\",\n        color: \"#3d5af1\",\n        boxShadow: \"inset -2px -2px 6px rgba(255, 255, 255, 1), inset 2px 2px 6px rgba(0, 0, 0, 0.1);\",\n      },\n    },\n    bottomSpacer: {\n      marginBottom: \"8px\",\n    },\n  }),\n);\n","import * as React from \"react\";\n\nimport { useError } from \"../service\";\nimport { ErrorMessage } from \"../theme\";\n\nfunction ErrorLogic(): JSX.Element {\n  const { error, clearError } = useError();\n\n  if (error) {\n    return <ErrorMessage error={error} clearError={clearError} />;\n  } else {\n    return <div />;\n  }\n}\n\nexport default ErrorLogic;\n","import * as React from \"react\";\n\nimport { useSdk } from \"../service\";\nimport { Loading, PageLayout } from \"../theme\";\nimport ErrorLogic from \"./ErrorLogic\";\n\n// Splash is a container to either show a loading (splash) page, or render the app\n// with a given PageLayout\nfunction Splash(props: { readonly children: any }): JSX.Element {\n  const { loading } = useSdk();\n\n  if (loading) {\n    return (\n      <React.Fragment>\n        <Loading />\n        <ErrorLogic />\n      </React.Fragment>\n    );\n  } else {\n    return <PageLayout>{props.children}</PageLayout>;\n  }\n}\n\nexport default Splash;\n","export interface AppConfig {\n  readonly httpUrl: string;\n  readonly faucetUrl?: string;\n  // codeId is the wasm codeId for the service contract on the given chain\n  readonly codeId: number;\n}\n\nconst local: AppConfig = {\n  httpUrl: \"http://localhost:1317\",\n  faucetUrl: \"http://localhost:8000/credit\",\n  codeId: 1,\n};\n\nconst demo: AppConfig = {\n  httpUrl: \"https://bootstrap.pub.testnet.enigma.co\",\n  faucetUrl: \"https://faucet.pub.testnet.enigma.co/credit\",\n  codeId: 93,\n};\n\n// REACT_APP_LOCAL is set via `yarn start:local`\nconst isLocal = process.env.NODE_ENV !== \"production\" && !!process.env.REACT_APP_LOCAL;\n\nexport const config = isLocal ? local : demo;","import Avatar from \"@material-ui/core/Avatar\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemAvatar from \"@material-ui/core/ListItemAvatar\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport WorkIcon from \"@material-ui/icons/Work\";\nimport * as React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { useBaseStyles } from \"../../theme\";\n\nexport interface ContractItemProps {\n  readonly codeId: number;\n  /** Bech32 account address */\n  readonly address: string;\n  readonly creator: string;\n  readonly label: string;\n}\n\nexport function ContractItem({ address, label }: ContractItemProps): JSX.Element {\n  const classes = useBaseStyles();\n\n  return (\n    <div className={classes.listCardContainer}>\n      <Link className={classes.link} to={`/contract/${address}`}>\n        <ListItem className={classes.listCard}>\n          <ListItemAvatar>\n            <Avatar>\n              <WorkIcon />\n            </Avatar>\n          </ListItemAvatar>\n          <ListItemText primary={label} secondary={address} />\n        </ListItem>\n      </Link>\n    </div>\n  );\n}\n","import List from \"@material-ui/core/List\";\nimport * as React from \"react\";\n\nimport { config } from \"../../config\";\nimport { useError, useSdk } from \"../../service\";\nimport { ContractItem, ContractItemProps } from \"./ContractItem\";\n\nconst defaultCodeId = config.codeId;\n\nfunction ContractList(): JSX.Element {\n  const { getClient } = useSdk();\n  const { setError } = useError();\n\n  const [contracts, setContracts] = React.useState<readonly ContractItemProps[]>([]);\n\n  // get the contracts\n  React.useEffect(() => {\n    getClient()\n      .getContracts(defaultCodeId)\n      .then(contracts => setContracts(contracts))\n      .catch(setError);\n  }, [getClient, setError]);\n\n  return (\n    <List>\n      {contracts.map(props => (\n        <ContractItem {...props} key={props.address} />\n      ))}\n    </List>\n  );\n}\n\nexport default ContractList;\n","import * as React from \"react\";\n\nimport { useAccount, useSdk } from \"../service\";\nimport { Header } from \"../theme\";\n\n// HeaderLogic calculates the values to render the header component (which can be theme'd)\nfunction HeaderLogic(): JSX.Element {\n  const { account } = useAccount();\n  const { address } = useSdk();\n  return <Header account={account} address={address}/>;\n}\n\nexport default HeaderLogic;\n","import { TextField } from \"@material-ui/core\";\nimport { FieldAttributes, useField } from \"formik\";\nimport * as React from \"react\";\n\ninterface TextFieldProps {\n  name: string;\n  type: string;\n  placeholder: string;\n  InputProps?: any;\n}\n\nexport const FormTextField: React.FC<TextFieldProps & FieldAttributes<{}>> = ({\n  type,\n  placeholder,\n  InputProps,\n  ...props\n}: TextFieldProps) => {\n  const [field, meta] = useField<{}>(props);\n  const errorText = meta.error && meta.touched ? meta.error : \"\";\n\n  if (type === \"number\") {\n    return (\n      <TextField\n        id=\"outlined-number\"\n        variant=\"outlined\"\n        type={type}\n        label={placeholder}\n        InputProps={InputProps}\n        {...field}\n        helperText={errorText}\n        error={!!errorText}\n      />\n    );\n  }\n\n  return (\n    <TextField\n      type={type}\n      placeholder={placeholder}\n      InputProps={InputProps}\n      fullWidth\n      {...field}\n      helperText={errorText}\n      error={!!errorText}\n    />\n  );\n};\n","import * as Yup from \"yup\";\n\nexport const ResetValidationSchema = Yup.object().shape({\n  countField: Yup.number()\n    .min(0, \"Count invalid\")\n    .required(\"Count is required\"),\n});\n","import { Form, Formik } from \"formik\";\nimport * as React from \"react\";\n\nimport { Button } from \"../../theme\";\nimport { useBaseStyles } from \"../../theme\";\nimport { FormValues } from \"../Form\";\nimport { FormTextField } from \"../Form/fields/FormTextField\";\nimport { ResetValidationSchema } from \"../Form/validationSchema\";\n\nexport const COUNT_FIELD = \"countField\";\n\ninterface ResetFormProps {\n  readonly loading: boolean;\n  readonly handleReset: (values: FormValues) => void;\n}\n\nexport const ResetForm: React.FC<ResetFormProps> = ({ handleReset, loading }: ResetFormProps) => {\n  const classes = useBaseStyles();\n\n  return (\n    <Formik\n      initialValues={{\n        countField: \"0\",\n      }}\n      validationSchema={ResetValidationSchema}\n      onSubmit={async ({ countField }, { setSubmitting }) => {\n        setSubmitting(true);\n        handleReset({ countField });\n      }}\n    >\n      {({ handleSubmit }) => (\n        <Form onSubmit={handleSubmit} className={classes.form}>\n          <div className={classes.input}>\n            <FormTextField placeholder=\"0\" name={COUNT_FIELD} type=\"integer\" />\n          </div>\n          <div>\n            <Button type=\"submit\" disabled={loading}>\n              Reset\n            </Button>\n          </div>\n        </Form>\n      )}\n    </Formik>\n  );\n};","import MuiTypography from \"@material-ui/core/Typography\";\nimport * as React from \"react\";\n\nimport { useAccount, useError, useSdk } from \"../../service\";\nimport { Button, useBaseStyles} from \"../../theme\";\n\nimport { FormValues } from \"../Form\";\nimport { COUNT_FIELD, ResetForm } from \"./ResetForm\";\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nexport interface CounterProps {\n  readonly contractAddress: string;\n}\n\nexport interface State {\n  readonly loading: boolean;\n  readonly count?: string;\n}\n\nexport function Counter(props: CounterProps): JSX.Element {\n  const classes = useBaseStyles();\n  const { contractAddress } = props;\n  const { getClient } = useSdk();\n  const { setError } = useError();\n  const { refreshAccount } = useAccount();\n\n  const [state, setState] = React.useState<State>({ loading: false });\n\n  React.useEffect(() => {\n    \n    setState({ loading: true });\n    getClient()\n      .queryContractSmart(contractAddress, { get_count: { } })\n      .then(res => {\n        setState({ count: res.count, loading: false });\n      })\n      .catch(err => {\n        setState({ loading: false });\n        if (!err.toString().includes(\"Failed to get counter\")) {\n          setError(err);\n        }\n      });\n  }, [getClient, setError, contractAddress]);\n\n  const increment = async (): Promise<boolean> => {\n    \n    setState({ loading: true });\n    try {\n      await getClient().execute(\n        props.contractAddress,\n        { increment: { } },\n      );\n      setState({ loading: false });\n      refreshAccount();\n      \n      await getClient().queryContractSmart(contractAddress, { get_count: { } })\n      .then(res => {\n        setState({ count: res.count, loading: false });\n      })\n      .catch(err => {\n        setState({ loading: false });\n        if (!err.toString().includes(\"Failed to get counter\")) {\n          setError(err);\n        }\n      });\n\n    } catch (err) {\n      setState({ loading: false });\n      setError(err);\n    }\n    return true;\n  };\n\n  const reset = async (values: FormValues): Promise<void> => {\n    const newCount = values[COUNT_FIELD];\n    setState({ loading: true });\n    try {\n      await getClient().execute(\n        props.contractAddress,\n        { reset: { count: parseInt(newCount) } }\n      );\n      setState({ count: newCount, loading: false });\n    } catch (err) {\n      setState({ loading: false });\n      setError(err);\n    }\n    try {\n      refreshAccount();\n    } catch(err) {\n      setError(\"Failed to reset account\");\n    }\n  };\n\n  return (\n    <div className={classes.card}>\n      <MuiTypography variant=\"h6\">\n        \n        Counter: {state.loading ? <LinearProgress /> : state.count}\n      </MuiTypography>\n      <Button color=\"primary\" type=\"submit\" onClick={increment} disabled={state.loading}>\n        Increment\n      </Button>\n      <ResetForm handleReset={reset} loading={state.loading} />\n    </div>\n  );\n}\n","import * as React from \"react\";\n\nimport { useError, useSdk } from \"../../service\";\nimport { useBaseStyles } from \"../../theme\";\nimport { Counter } from \"./Counter\";\n\nexport interface ContractDetailsProps {\n  readonly address: string;\n  readonly name?: string;\n}\n\ntype State = ContractDetailsProps;\n\nconst emptyInfo: State = {\n  address: \"\"\n};\n\nfunction ContractLogic({ address, name }: ContractDetailsProps): JSX.Element {\n  const classes = useBaseStyles();\n  const { getClient } = useSdk();\n  const { setError } = useError();\n\n  // eslint-disable-next-line\n  const [value, setValue] = React.useState<State>(emptyInfo);\n\n  // get the contracts\n  React.useEffect(() => {\n    getClient()\n      .getContract(address)\n      .then((info: any) => setValue({ ...info, address }))\n      .catch(setError);\n  }, [setError, address, getClient]);\n\n  return (\n    <div className={classes.contractLogicContainer}>\n      <Counter contractAddress={address} />\n    </div>\n  );\n}\n\nexport default ContractLogic;\n","import React from \"react\";\nimport { useParams } from \"react-router\";\n\nimport ContractLogic from \"../components/ContractLogic\";\n\nfunction ContractSearch(): JSX.Element {\n  const { address } = useParams();\n\n  return <ContractLogic address={address || \"\"} />;\n}\n\nexport default ContractSearch;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router\";\nimport { HashRouter } from \"react-router-dom\";\n\nimport ContractList from \"../components/ContractList\";\nimport ErrorLogic from \"../components/ErrorLogic\";\nimport HeaderLogic from \"../components/HeaderLogic\";\nimport ContractSearch from \"./contract\";\n\nconst Routes = (): JSX.Element => (\n  <HashRouter basename=\"/\">\n    <HeaderLogic />\n    <ErrorLogic />\n    <Switch>\n      <Route exact path=\"/\" component={ContractList} />\n      <Route exact path=\"/contract/:address\" component={ContractSearch} />\n    </Switch>\n  </HashRouter>\n);\n\nexport default Routes;\n","/* eslint-disable no-console */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config): void {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config): Promise<void> {\n  return navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config): Promise<void> {\n  // Check if the service worker can be found. If it can't reload the page.\n  return fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport async function unregister(): Promise<void> {\n  if (\"serviceWorker\" in navigator) {\n    await navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","\nimport \"./index.css\";\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport Splash from \"./components/Splash\";\nimport { config } from \"./config\";\nimport Routes from \"./routes\";\nimport { AccountProvider, BurnerWalletProvider, ErrorProvider } from \"./service\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst rootEl = document.getElementById(\"root\");\n\nconst render = (Component: React.ComponentType): void => {\n  ReactDOM.render(\n    <ErrorProvider>\n      <BurnerWalletProvider config={config}>\n        <AccountProvider>\n          <Splash>\n            <Component />\n          </Splash>\n        </AccountProvider>\n      </BurnerWalletProvider>\n    </ErrorProvider>,\n    rootEl,\n  );\n};\n\nrender(Routes);\n\nif ((module as any).hot) {\n  (module as any).hot.accept(\"./routes\", (): void => {\n    const NextApp = require(\"./routes\").default;\n    render(NextApp);\n  });\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}